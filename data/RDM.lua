--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- __________.__                                ________                          __               .__.__  __      __  .__    .__           _____.__.__              
-- \______   |  |   ____ _____    ______ ____   \______ \   ____     ____   _____/  |_    ____   __| _|___/  |_  _/  |_|  |__ |__| ______ _/ ____|__|  |   ____      
--  |     ___|  | _/ __ \\__  \  /  ____/ __ \   |    |  \ /  _ \   /    \ /  _ \   __\ _/ __ \ / __ ||  \   __\ \   __|  |  \|  |/  ___/ \   __\|  |  | _/ __ \     
--  |    |   |  |_\  ___/ / __ \_\___ \\  ___/   |    `   (  <_> ) |   |  (  <_> |  |   \  ___// /_/ ||  ||  |    |  | |   Y  |  |\___ \   |  |  |  |  |_\  ___/     
--  |____|   |____/\___  (____  /____  >\___  > /_______  /\____/  |___|  /\____/|__|    \___  \____ ||__||__|    |__| |___|  |__/____  >  |__|  |__|____/\___  > /\ 
--                     \/     \/     \/     \/          \/              \/                   \/     \/                      \/        \/                      \/  \/ 
--
--	Please do not edit this file!							Please do not edit this file!							Please do not edit this file!
--
--	Editing this file will cause you to be unable to use Github Desktop to update!
--
--	Any changes you wish to make in this file you should be able to make by overloading. That is Re-Defining the same variables or functions in another file, by copying and
--	pasting them to a file that is loaded after the original file, all of my library files, and then job files are loaded first.
--	The last files to load are the ones unique to you. User-Globals, Charactername-Globals, Charactername_Job_Gear, in that order, so these changes will take precedence.
--
--	You may wish to "hook" into existing functions, to add functionality without losing access to updates or fixes I make, for example, instead of copying and editing
--	status_change(), you can instead use the function user_status_change() in the same manner, which is called by status_change() if it exists, most of the important 
--  gearswap functions work like this in my files, and if it's unique to a specific job, user_job_status_change() would be appropriate instead.
--
--  Variables and tables can be easily redefined just by defining them in one of the later loaded files: autofood = 'Miso Ramen' for example.
--  States can be redefined as well: state.HybridMode:options('Normal','PDT') though most of these are already redefined in the gear files for editing there.
--	Commands can be added easily with: user_self_command(commandArgs, eventArgs) or user_job_self_command(commandArgs, eventArgs)
--
--	If you're not sure where is appropriate to copy and paste variables, tables and functions to make changes or add them:
--		User-Globals.lua - 			This file loads with all characters, all jobs, so it's ideal for settings and rules you want to be the same no matter what.
--		Charactername-Globals.lua -	This file loads with one character, all jobs, so it's ideal for gear settings that are usable on all jobs, but unique to this character.
--		Charactername_Job_Gear.lua-	This file loads only on one character, one job, so it's ideal for things that are specific only to that job and character.
--
--
--	If you still need help, feel free to contact me on discord or ask in my chat for help: https://discord.gg/ug6xtvQ
--  !Please do NOT message me in game about anything third party related, though you're welcome to message me there and ask me to talk on another medium.
--
--  Please do not edit this file!							Please do not edit this file!							Please do not edit this file!
-- __________.__                                ________                          __               .__.__  __      __  .__    .__           _____.__.__              
-- \______   |  |   ____ _____    ______ ____   \______ \   ____     ____   _____/  |_    ____   __| _|___/  |_  _/  |_|  |__ |__| ______ _/ ____|__|  |   ____      
--  |     ___|  | _/ __ \\__  \  /  ____/ __ \   |    |  \ /  _ \   /    \ /  _ \   __\ _/ __ \ / __ ||  \   __\ \   __|  |  \|  |/  ___/ \   __\|  |  | _/ __ \     
--  |    |   |  |_\  ___/ / __ \_\___ \\  ___/   |    `   (  <_> ) |   |  (  <_> |  |   \  ___// /_/ ||  ||  |    |  | |   Y  |  |\___ \   |  |  |  |  |_\  ___/     
--  |____|   |____/\___  (____  /____  >\___  > /_______  /\____/  |___|  /\____/|__|    \___  \____ ||__||__|    |__| |___|  |__/____  >  |__|  |__|____/\___  > /\ 
--                     \/     \/     \/     \/          \/              \/                   \/     \/                      \/        \/                      \/  \/ 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------
-- Setup functions for this job.  Generally should not be modified.
-------------------------------------------------------------------------------------------------------------------

-- Initialization function for this job file.
function get_sets()
    -- Load and initialize the include file.
    include('Sel-Include.lua')
end


-- Setup vars that are user-independent.  state.Buff vars initialized here will automatically be tracked.
function job_setup()

    state.Buff.Saboteur = buffactive.Saboteur or false
	state.Buff.Stymie = buffactive.Stymie or false
	state.Buff.Chainspell = buffactive.Chainspell or false
	state.Buff['Aftermath: Lv.3'] = buffactive['Aftermath: Lv.3'] or false
	
    LowTierNukes = S{'Stone', 'Water', 'Aero', 'Fire', 'Blizzard', 'Thunder',
        'Stone II', 'Water II', 'Aero II', 'Fire II', 'Blizzard II', 'Thunder II',
        'Stonega', 'Waterga', 'Aeroga', 'Firaga', 'Blizzaga', 'Thundaga'}
	
	state.RecoverMode = M('35%', '60%', 'Always', 'Never')
	
	autows = "Savage Blade"
	autofood = 'Pear Crepe'
	enspell = ''
	
	update_melee_groups()
	init_job_states({"Capacity","AutoRuneMode","AutoTrustMode","AutoNukeMode","AutoWSMode","AutoShadowMode","AutoFoodMode","AutoStunMode","AutoDefenseMode",},{"AutoBuffMode","AutoSambaMode","Weapons","OffenseMode","WeaponskillMode","IdleMode","Passive","RuneElement","RecoverMode","ElementalMode","CastingMode","TreasureMode",})
end

-------------------------------------------------------------------------------------------------------------------
-- Job-specific hooks for standard casting events.
-------------------------------------------------------------------------------------------------------------------
-- Set eventArgs.handled to true if we don't want any automatic gear equipping to be done.
-- Set eventArgs.useMidcastGear to true if we want midcast gear equipped on precast.
function select_default_macro_book()
	if player.sub_job == 'BLM' then
		set_macro_page(1, 5)
	elseif player.sub_job == 'SCH' then
		set_macro_page(1, 5)
	elseif player.sub_job == 'NIN' then
		set_macro_page(1, 5)
	else
		set_macro_page(1, 5)
	end
end

weapon_castingmode = {['None']='Normal',['Murgleis']='Melee',['Crocea Mors']='Melee',['Sequence']='Melee',['Naegling']='Melee',['DualMurCea']='Melee',['DualMurgleis']='Melee',['DualCrocea']='Melee',['DualCroDay']='Melee',['DualSequence']='Melee',['DualSavage']='Melee',['DualEvis']='Melee',['DualClubs']='Melee',}

function user_job_state_change(stateField, newValue, oldValue)
	if stateField == 'Weapons' then
		if weapon_castingmode[newValue] then 
			state.CastingMode:set(weapon_castingmode[newValue]) 
		end
	end
end

function user_job_buff_change(buff, gain)
	if buff:startswith('Addendum: ') or buff:endswith(' Arts') then
		style_lock = true
	end
end

function job_filtered_action(spell, eventArgs)

end

function job_pretarget(spell, spellMap, eventArgs)

end

function job_precast(spell, spellMap, eventArgs)
    local abil_recasts = windower.ffxi.get_ability_recasts()
    local accession_spells = S{'Regen','Regen II','Regen III','Sneak','Invisible','Aquaveil','Shell V','Protect V',}
	local manifestation_spells = S{'Break','Sleep','Sleep II',}
    
	if spell.action_type == 'Magic' then
		if state.Buff.Chainspell then
			eventArgs.handled = true
		end
        
        if accession_spells:contains(spell.english) then -- and not data.areas.cities:contains(world.area) then
			local abil_recasts = windower.ffxi.get_ability_recasts()
			if not buffactive['SJ Restriction'] and (player.sub_job == "SCH" and get_current_stratagem_count() > 0 and not(buffactive.Accession or silent_check_amnesia())) then
				if state.Buff['Light Arts'] or buffactive['Addendum: White'] then
					windower.chat.input('/ja "Accession" <me>')
					windower.chat.input:schedule(1.6,'/ma "'..spell.english..'" '..spell.target.raw..'')
					add_to_chat(122,'Accession - "'..spell.english..'" !')
					eventArgs.cancel = true
					tickdelay = os.clock() + 4.6
				else
					if abil_recasts[228] < latency then
						windower.chat.input('/ja "Light Arts" <me>')
						windower.chat.input:schedule(1.6,'/ja "Accession" <me>')
						windower.chat.input:schedule(3.1,'/ma "'..spell.english..'" '..spell.target.raw..'')
						add_to_chat(122,'Accession - "'..spell.english..'" !')
						eventArgs.cancel = true
						tickdelay = os.clock() + 6.2
					end
				end
			end
		elseif manifestation_spells:contains(spell.english) then -- and not data.areas.cities:contains(world.area) then
			local abil_recasts = windower.ffxi.get_ability_recasts()
			if not buffactive['SJ Restriction'] and (player.sub_job == "SCH" and get_current_stratagem_count() > 0 and not(buffactive.Manifestation or silent_check_amnesia())) then
				if state.Buff['Dark Arts'] then
					windower.chat.input('/ja "Manifestation" <me>')
					windower.chat.input:schedule(1.6,'/ma "'..spell.english..'" '..spell.target.raw..'')
					add_to_chat(122,'Manifestation - "'..spell.english..'" !')
					eventArgs.cancel = true
					tickdelay = os.clock() + 4.6
				else
					if abil_recasts[228] < latency then
						windower.chat.input('/ja "Dark Arts" <me>')
						windower.chat.input:schedule(1.6,'/ja "Manifestation" <me>')
						windower.chat.input:schedule(3.1,'/ma "'..spell.english..'" '..spell.target.raw..'')
						add_to_chat(122,'Manifestation - "'..spell.english..'" !')
						eventArgs.cancel = true
						tickdelay = os.clock() + 6.2
					end
				end
			end
		elseif spell.english == 'Phalanx' and (spell.target.type ~= 'SELF') then
			windower.chat.input('/ma "Phalanx II" '..spell.target.raw)
			cancel_spell()
			eventArgs.cancel = true
		end
		
        if state.CastingMode.value == 'Proc' then
            classes.CustomClass = 'Proc'
        end
    end

end

function job_post_precast(spell, spellMap, eventArgs)
	if spell.type == 'WeaponSkill' then
		local WSset = standardize_set(get_precast_set(spell, spellMap))
		local wsacc = check_ws_acc()
		
		if (WSset.ear1 == "Moonshade Earring" or WSset.ear2 == "Moonshade Earring") then
			-- Replace Moonshade Earring if we're at cap TP
			if get_effective_player_tp(spell, WSset) > 3200 then
				if wsacc:contains('Acc') and not buffactive['Sneak Attack'] and sets.AccMaxTP then
					equip(sets.AccMaxTP[spell.english] or sets.AccMaxTP)
				elseif sets.MaxTP then
					equip(sets.MaxTP[spell.english] or sets.MaxTP)
				else
				end
			end
		end
	end
end

-- Run after the default midcast() is done.
-- eventArgs is the same one used in job_midcast, in case information needs to be persisted.
function job_post_midcast(spell, spellMap, eventArgs)

	if spell.skill == 'Elemental Magic' and default_spell_map ~= 'ElementalEnfeeble' and spell.english ~= 'Impact' then
		if state.MagicBurstMode.value ~= 'Off' then
			if state.CastingMode.value:contains('Proc') then
				equip(sets.midcast['Elemental Magic'].Proc)
			elseif state.CastingMode.value:contains('Resistant') and sets.ResistantMagicBurst then
				equip(sets.ResistantMagicBurst)
			else
				equip(sets.MagicBurst)
			end
		end
		if spell.element == world.weather_element or spell.element == world.day_element then
		end
		
		if spell.element and sets.element[spell.element] then
			equip(sets.element[spell.element])
		end
		
		if state.RecoverMode.value ~= 'Never' and (state.RecoverMode.value == 'Always' or tonumber(state.RecoverMode.value:sub(1, -2)) > player.mpp) then
			if state.MagicBurstMode.value ~= 'Off' then
				if state.CastingMode.value:contains('Resistant') and sets.ResistantRecoverBurst then
					equip(sets.ResistantRecoverBurst)
				elseif state.CastingMode.value:contains('Proc') then
					equip(sets.midcast['Elemental Magic'].Proc)
				elseif sets.RecoverBurst then
					equip(sets.RecoverBurst)
				elseif sets.RecoverMP then
					equip(sets.RecoverMP)
				end
			elseif sets.RecoverMP then
				equip(sets.RecoverMP)
			end
		end
		
    elseif spell.skill == 'Enfeebling Magic' then
		if state.Buff.Stymie then
			equip(sets.buff.Stymie)
		end
		
		if state.Buff.Saboteur then
			equip(sets.buff.Saboteur)
		end
	elseif spell.skill == 'Enhancing Magic' then
		equip(sets.midcast['Enhancing Magic'])
	
		if buffactive.Composure and spell.target.type == 'PLAYER' then
			equip(sets.buff.ComposureOther)
		end

		if spell.english == 'Phalanx II' and spell.target.type =='SELF' and sets.Self_Phalanx then
			equip(sets.Self_Phalanx)
		elseif sets.midcast[spell.english] then
			equip(sets.midcast[spell.english])
		elseif sets.midcast[spellMap] then
			equip(sets.midcast[spellMap])
		end

		if can_dual_wield and (state.Weapons.value == 'None' or state.UnlockWeapons.value) then
			if spell.english == 'Phalanx II' and spell.target.type =='SELF' and sets.Self_Phalanx and sets.Self_Phalanx.DW then
				equip(sets.Self_Phalanx.DW)
			elseif sets.midcast[spell.english] and sets.midcast[spell.english].DW then
				equip(sets.midcast[spell.english].DW)
			elseif sets.midcast[spellMap] and sets.midcast[spellMap].DW then
				equip(sets.midcast[spellMap].DW)
			end
		end
    end
end

function job_aftercast(spell, spellMap, eventArgs)
    if not spell.interrupted then
        if state.UseCustomTimers.value and spell.english == 'Sleep' or spell.english == 'Sleepga' then
            send_command('@timers c "'..spell.english..' ['..spell.target.name..']" 60 down spells/00220.png')
        elseif state.UseCustomTimers.value and spell.english == 'Sleep II' then
            send_command('@timers c "'..spell.english..' ['..spell.target.name..']" 90 down spells/00220.png')
        elseif spell.skill == 'Elemental Magic' and state.MagicBurstMode.value == 'Single' then
            state.MagicBurstMode:reset()
			if state.DisplayMode.value then update_job_states()	end
		elseif data.spells.enspells:contains(spell.english) then
			enspell = spell.english
			update_melee_groups()
		end
	end
end

function job_buff_change(buff, gain)
	if buff == enspell and not gain then
		enspell = ''
	end
	update_melee_groups()
end

-------------------------------------------------------------------------------------------------------------------
-- Job-specific hooks for non-casting events.
-------------------------------------------------------------------------------------------------------------------

function job_update(cmdParams, eventArgs)
	update_melee_groups()
end

    -- Allow jobs to override this code
function job_self_command(commandArgs, eventArgs)
	if commandArgs[1]:lower() == 'elemental' then
		handle_elemental(commandArgs)
		eventArgs.handled = true			
	end
end

-------------------------------------------------------------------------------------------------------------------
-- User code that supplements standard library decisions.
-------------------------------------------------------------------------------------------------------------------

-- Modify the default idle set after it was constructed.
function job_customize_idle_set(idleSet)
    if buffactive['Sublimation: Activated'] then
        if (state.IdleMode.value == 'Normal' or state.IdleMode.value:contains('Sphere')) and sets.buff.Sublimation then
            idleSet = set_combine(idleSet, sets.buff.Sublimation)
        elseif state.IdleMode.value:contains('DT') and sets.buff.DTSublimation then
            idleSet = set_combine(idleSet, sets.buff.DTSublimation)
        end
    end
	
	if buffactive['Tactician\'s Roll'] and __rollNum == 11 then
		idleSet = set_combine(idleSet, sets.rollerRing)
	end

    if state.IdleMode.value == 'Normal' or state.IdleMode.value:contains('Sphere') then
		if player.mpp < 51 then
			if sets.latent_refresh then
				idleSet = set_combine(idleSet, sets.latent_refresh)
			end
			
			if (state.Weapons.value == 'None' or state.UnlockWeapons.value) and idleSet.main then
				local main_table = get_item_table(idleSet.main)

				if  main_table and main_table.skill == 12 and sets.latent_refresh_grip then
					idleSet = set_combine(idleSet, sets.latent_refresh_grip)
				end
				
				if player.tp > 10 and sets.TPEat then
					idleSet = set_combine(idleSet, sets.TPEat)
				end
			end
		end
   end
    
    return idleSet
end

function job_customize_melee_set(meleeSet)
	if state.Weapons.value:contains('Enspell') and enspell ~= '' then
		local enspell_element = data.elements.enspells_lookup[enspell]
		if sets.element.enspell and sets.element.enspell[enspell_element] then
			meleeSet = set_combine(meleeSet, sets.element.enspell[enspell_element])
		end

		local single_obi_intensity = 0
		local orpheus_intensity = 0
		local hachirin_intensity = 0

		if item_available("Orpheus's Sash") then
			orpheus_intensity = 15
		end

		if item_available(data.elements.obi_of[enspell_element]) then
			if enspell_element == world.weather_element then
				single_obi_intensity = single_obi_intensity + data.weather_bonus_potency[world.weather_intensity]
			end
			if enspell_element == world.day_element then
				single_obi_intensity = single_obi_intensity + 10
			end
		end
		
		if item_available('Hachirin-no-Obi') then
			if enspell_element == world.weather_element then
				hachirin_intensity = hachirin_intensity + data.weather_bonus_potency[world.weather_intensity]
			elseif enspell_element == data.elements.weak_to[world.weather_element] then
				hachirin_intensity = hachirin_intensity - data.weather_bonus_potency[world.weather_intensity]
			end
			if enspell_element == world.day_element then
				hachirin_intensity = hachirin_intensity + 10
			elseif enspell_element == data.elements.weak_to[world.day_element] then
				hachirin_intensity = hachirin_intensity - 10
			end
		end
	
		if single_obi_intensity >= hachirin_intensity and single_obi_intensity >= orpheus_intensity and single_obi_intensity >= 5 then
			meleeSet = set_combine(meleeSet, {waist=data.elements.obi_of[enspell_element]})
		elseif hachirin_intensity >= orpheus_intensity and hachirin_intensity >= 5 then
			meleeSet = set_combine(meleeSet, {waist="Hachirin-no-Obi"})
		elseif orpheus_intensity >= 5 then
			meleeSet = set_combine(meleeSet, {waist="Orpheus's Sash"})
		end

	end

    return meleeSet
end

-- Set eventArgs.handled to true if we don't want the automatic display to be run.
function display_current_job_state(eventArgs)
    display_current_caster_state()
    eventArgs.handled = true
end

-- Custom spell mapping.
function job_get_spell_map(spell, default_spell_map)
	if  default_spell_map == 'Cure' or default_spell_map == 'Curaga'  then
		if world.weather_element == 'Light' then
                return 'LightWeatherCure'
		elseif world.day_element == 'Light' then
                return 'LightDayCure'
        end
	end	
	
	if spell.skill == 'Enfeebling Magic' then
		if spell.english:startswith('Dia') then
			return "Dia"
		elseif spell.type == "WhiteMagic" or spell.english:startswith('Frazzle') or spell.english:startswith('Distract') then
			return 'MndEnfeebles'
        else
            return 'IntEnfeebles'
        end
    end
	
	if spell.skill == 'Elemental Magic' and default_spell_map ~= 'ElementalEnfeeble' then
        if LowTierNukes:contains(spell.english) then
            return 'LowTierNuke'
        else
            return 'HighTierNuke'
        end
    end
	
end

-- Handling Elemental spells within Gearswap.
-- Format: gs c elemental <nuke, helix, skillchain1, skillchain2, weather>
function handle_elemental(cmdParams)
    -- cmdParams[1] == 'elemental'
    -- cmdParams[2] == ability to use

    if not cmdParams[2] then
        add_to_chat(123,'Error: No elemental command given.')
        return
    end
    local command = cmdParams[2]:lower()

	if command == 'spikes' then
		windower.chat.input('/ma "'..data.elements.spikes_of[state.ElementalMode.value]..' Spikes" <me>')
		return
	elseif command == 'enspell' then
		if  (player.sub_job == 'NIN' or player.sub_job == 'DNC') then 
			windower.chat.input('/ma "En'..data.elements.enspell_of[state.ElementalMode.value]..'" <me>')
		else
			windower.chat.input('/ma "En'..data.elements.enspell_of[state.ElementalMode.value]..' II" <me>')
		end
		return
	elseif command == 'weather' then
		if player.sub_job ~= 'SCH' then
			windower.chat.input('/ma "Phalanx" <me>')
		else
			local spell_recasts = windower.ffxi.get_spell_recasts()
			if (player.target.type == 'SELF' or not player.target.in_party) and buffactive[data.elements.storm_of[state.ElementalMode.value]] and not buffactive['Klimaform'] and spell_recasts[287] < spell_latency then
				windower.chat.input('/ma "Klimaform" <me>')
			else
				windower.chat.input('/ma "'..data.elements.storm_of[state.ElementalMode.value]..'"')
			end
		end
		return
	end

	local target = '<t>'
	if cmdParams[3] then
		if tonumber(cmdParams[3]) then
			target = tonumber(cmdParams[3])
		else
			target = table.concat(cmdParams, ' ', 3)
			target = get_closest_mob_id_by_name(target) or '<t>'
		end
	end

    if command == 'nuke' then
		local spell_recasts = windower.ffxi.get_spell_recasts()
		
		if state.ElementalMode.value == 'Light' then
			if spell_recasts[29] < spell_latency and actual_cost(get_spell_table_by_name('Banish II')) < player.mp then
				windower.chat.input('/ma "Banish II" '..target..'')
			elseif spell_recasts[28] < spell_latency and actual_cost(get_spell_table_by_name('Banish')) < player.mp then
				windower.chat.input('/ma "Banish" '..target..'')
			else
				add_to_chat(123,'Abort: Banishes on cooldown or not enough MP.')
			end

		elseif state.ElementalMode.value == 'Dark' then
			if spell_recasts[219] < spell_latency and actual_cost(get_spell_table_by_name('Comet')) < player.mp then
				windower.chat.input('/ma "Comet" '..target..'')
			else
				add_to_chat(123,'Abort: Comet on cooldown or not enough MP.')
			end

		else
			if player.job_points[(res.jobs[player.main_job_id].ens):lower()].jp_spent > 99 and spell_recasts[get_spell_table_by_name(data.elements.nuke_of[state.ElementalMode.value]..' V').id] < spell_latency and actual_cost(get_spell_table_by_name(data.elements.nuke_of[state.ElementalMode.value]..' V')) < player.mp then
				windower.chat.input('/ma "'..data.elements.nuke_of[state.ElementalMode.value]..' V" '..target..'')
			else
				local tiers = {' IV',' III',' II',''}
				for k in ipairs(tiers) do
					if spell_recasts[get_spell_table_by_name(data.elements.nuke_of[state.ElementalMode.value]..''..tiers[k]..'').id] < spell_latency and actual_cost(get_spell_table_by_name(data.elements.nuke_of[state.ElementalMode.value]..''..tiers[k]..'')) < player.mp then
						windower.chat.input('/ma "'..data.elements.nuke_of[state.ElementalMode.value]..''..tiers[k]..'" '..target..'')
						return
					end
				end
				add_to_chat(123,'Abort: All '..data.elements.nuke_of[state.ElementalMode.value]..' nukes on cooldown or or not enough MP.')
			end
		end

	elseif command == 'ninjutsu' then
		windower.chat.input('/ma "'..data.elements.ninjutsu_nuke_of[state.ElementalMode.value]..': Ni" '..target..'')
		
	elseif command == 'smallnuke' then
		local spell_recasts = windower.ffxi.get_spell_recasts()
	
		local tiers = {' II',''}
		for k in ipairs(tiers) do
			if spell_recasts[get_spell_table_by_name(data.elements.nuke_of[state.ElementalMode.value]..''..tiers[k]..'').id] < spell_latency and actual_cost(get_spell_table_by_name(data.elements.nuke_of[state.ElementalMode.value]..''..tiers[k]..'')) < player.mp then
				windower.chat.input('/ma "'..data.elements.nuke_of[state.ElementalMode.value]..''..tiers[k]..'" '..target..'')
				return
			end
		end
		add_to_chat(123,'Abort: All '..data.elements.nuke_of[state.ElementalMode.value]..' nukes on cooldown or or not enough MP.')
		
	elseif command:contains('tier') then
		local spell_recasts = windower.ffxi.get_spell_recasts()
		local tierlist = {['tier1']='',['tier2']=' II',['tier3']=' III',['tier4']=' IV',['tier5']=' V',['tier6']=' VI'}
		
		windower.chat.input('/ma "'..data.elements.nuke_of[state.ElementalMode.value]..tierlist[command]..'" '..target..'')
		
	elseif command == 'ara' then
		windower.chat.input('/ma "'..data.elements.nukera_of[state.ElementalMode.value]..'ra" '..target..'')
		
	elseif command == 'aga' then
		local spell_recasts = windower.ffxi.get_spell_recasts()
		if state.ElementalMode.value == 'Wind' and spell_recasts[185] < spell_latency and actual_cost(get_spell_table_by_name('Aero II')) < player.mp then
			windower.chat.input('/ma "Aeroga II" '..target..'')
		elseif state.ElementalMode.value == 'Earth' and spell_recasts[190] < spell_latency and actual_cost(get_spell_table_by_name('Stonega II')) < player.mp then
			windower.chat.input('/ma "Stonega II" '..target..'')
		elseif state.ElementalMode.value == 'Water' and spell_recasts[200] < spell_latency and actual_cost(get_spell_table_by_name('Waterga II')) < player.mp then
			windower.chat.input('/ma "Waterga II" '..target..'')
		else
			windower.chat.input('/ma "'..data.elements.nukega_of[state.ElementalMode.value]..'ga" '..target..'')
		end
		
	elseif command == 'helix' then
		windower.chat.input('/ma "'..data.elements.helix_of[state.ElementalMode.value]..'helix" '..target..'')
		
	elseif command == 'enfeeble' then
		windower.chat.input('/ma "'..data.elements.elemental_enfeeble_of[state.ElementalMode.value]..'" '..target..'')
	
	elseif command == 'bardsong' then
		windower.chat.input('/ma "'..data.elements.threnody_of[state.ElementalMode.value]..' Threnody" '..target..'')
    else
        add_to_chat(123,'Unrecognized elemental command.')
    end
end


function job_tick_moving()
	if state.AutoMovingMode.value then
		if check_arts() then return true end
		if check_buff() then return true end
		if check_buffup() then return true end
		if check_zerg_sp() then return true end
		return false
	end
end
	
function job_tick()
	if check_arts() then return true end
	if check_buff() then return true end
	if check_buffup() then return true end
    if check_zerg_sp() then return true end
	return false
end

function check_arts()
	if not data.areas.cities:contains(world.area) and ((state.AutoArts.value and player.in_combat) and state.AutoBuffMode.value ~= 'Off') then
		local abil_recasts = windower.ffxi.get_ability_recasts()
		
		if not buffactive.Composure then	
			local abil_recasts = windower.ffxi.get_ability_recasts()	
			if abil_recasts[50] < latency then	
				tickdelay = os.clock() + 1.1
				windower.chat.input('/ja "Composure" <me>')	
				return true
			end	
		end	

		if player.sub_job == 'SCH' and not (state.Buff['SJ Restriction']) then
			if state.AutoArtsType.value == 'Light' then
				if not state.Buff['Addendum: White'] then
					if not state.Buff['Light Arts'] and abil_recasts[228] < latency and not state.Buff['Addendum: White'] then
						windower.chat.input('/ja "Light Arts" <me>')
					elseif state.Buff['Light Arts'] and abil_recasts[233] < latency and not state.Buff['Addendum: White'] and get_current_stratagem_count() > 0 then
						windower.chat.input('/ja "Addendum: White" <me>')
					end
					tickdelay = os.clock() + 2.1
					return true
				end		
			elseif state.AutoArtsType.value == 'Dark' then
				if not state.Buff['Addendum: Black'] then
					if not state.Buff['Dark Arts'] and abil_recasts[232] < latency and not state.Buff['Addendum: Black'] then
						windower.chat.input('/ja "Dark Arts" <me>')
					elseif state.Buff['Dark Arts'] and abil_recasts[233] < latency and not state.Buff['Addendum: Black'] and get_current_stratagem_count() > 0 then
						windower.chat.input('/ja "Addendum: Black" <me>')
					end
					tickdelay = os.clock() + 2.1
					return true
				end
			end
		end
	end
	
	return false
end

-- function check_arts()	
	-- if buffup ~= '' or (not data.areas.cities:contains(world.area) and ((state.AutoArts.value and player.in_combat) or state.AutoBuffMode.value ~= 'Off')) then

 		-- local abil_recasts = windower.ffxi.get_ability_recasts()	

 		-- if not buffactive.Composure then	
			-- local abil_recasts = windower.ffxi.get_ability_recasts()	
			-- if abil_recasts[50] < latency then	
				-- tickdelay = os.clock() + 1.1
				-- windower.chat.input('/ja "Composure" <me>')	
				-- return true	
			-- end	
		-- end	

 		-- if player.sub_job == 'SCH' and not (state.Buff['SJ Restriction'] or arts_active()) and abil_recasts[228] < latency then	
			-- windower.chat.input('/ja "Light Arts" <me>')	
			-- tickdelay = os.clock() + 1.1
			-- return true	
		-- end	

 	-- end	

 	-- return false	
-- end

function check_buff()
	if state.AutoBuffMode.value ~= 'Off' and not data.areas.cities:contains(world.area) then
		local spell_recasts = windower.ffxi.get_spell_recasts()
		local abil_recasts = windower.ffxi.get_ability_recasts()
		local battle_target = windower.ffxi.get_mob_by_target('bt') or false
		
		for i in pairs(buff_spell_lists[state.AutoBuffMode.Value]) do
			if not buffactive[buff_spell_lists[state.AutoBuffMode.Value][i].Buff] and (buff_spell_lists[state.AutoBuffMode.Value][i].When == 'Always' or 
            (buff_spell_lists[state.AutoBuffMode.Value][i].When == 'Combat' and (player.in_combat or being_attacked)) or 
            (buff_spell_lists[state.AutoBuffMode.Value][i].When == 'Engaged' and player.status == 'Engaged') or 
            (buff_spell_lists[state.AutoBuffMode.Value][i].When == 'Idle' and player.status == 'Idle') or 
            (buff_spell_lists[state.AutoBuffMode.Value][i].When == 'OutOfCombat' and not (player.in_combat or being_attacked))) and 
			((buff_spell_lists[state.AutoBuffMode.Value][i].Buff == 'Haste' and not buffactive['Slow'] and not buffactive['Haste']) or not (buff_spell_lists[state.AutoBuffMode.Value][i].Buff == 'Haste')) and
            spell_recasts[buff_spell_lists[state.AutoBuffMode.Value][i].SpellID] < spell_latency and 
            player.mp > res.spells[buff_spell_lists[state.AutoBuffMode.Value][i].SpellID].mp_cost and 
            silent_can_use(buff_spell_lists[state.AutoBuffMode.Value][i].SpellID) and 
            (((player.sub_job == 'SCH' and data.spells.addendum_white:contains(buff_spell_lists[state.AutoBuffMode.Value][i].Name) and not buffactive['Addendum: White'] and get_current_stratagem_count() > 0) or (player.sub_job == 'SCH' and data.spells.addendum_white:contains(buff_spell_lists[state.AutoBuffMode.Value][i].Name) and buffactive['Addendum: White'])) or (player.sub_job ~= 'SCH' or (not(data.spells.addendum_white:contains(buff_spell_lists[state.AutoBuffMode.Value][i].Name)) and player.sub_job == 'SCH'))) then
				windower.chat.input('/ma "'..buff_spell_lists[state.AutoBuffMode.Value][i].Name..'" <me>')
				tickdelay = os.clock() + 2
				return true
			end
		end

		-- Convert
		if abil_recasts[49] < latency and player.mpp < 25 and not silent_check_amnesia() and player.in_combat and (battle_target and battle_target.distance:sqrt() < (battle_target.model_size + 20.1) and battle_target.valid_target) then
			add_to_chat(122,'MP low, Converting!')
			windower.chat.input('/ja Convert <me>')
			tickdelay = os.clock() + 2
			return true
		end
	else
		return false
	end
end

function check_buffup()
	if buffup ~= '' then
		local needsbuff = false
		for i in pairs(buff_spell_lists[buffup]) do
			if not buffactive[buff_spell_lists[buffup][i].Buff] and silent_can_use(buff_spell_lists[buffup][i].SpellID) then
				needsbuff = true
				break
			end
		end
	
		if not needsbuff then
			add_to_chat(217, 'All '..buffup..' buffs are up!')
			buffup = ''
			return false
		end
		
		local spell_recasts = windower.ffxi.get_spell_recasts()
		
		for i in pairs(buff_spell_lists[buffup]) do
			if not buffactive[buff_spell_lists[buffup][i].Buff] and silent_can_use(buff_spell_lists[buffup][i].SpellID) and spell_recasts[buff_spell_lists[buffup][i].SpellID] < spell_latency then
				windower.chat.input('/ma "'..buff_spell_lists[buffup][i].Name..'" <me>')
				tickdelay = os.clock() + 2
				return true
			end
		end
		
		return false
	else
		return false
	end
end

function update_melee_groups()
	classes.CustomMeleeGroups:clear()
	
	if enspell ~= '' then
		if enspell:endswith('II') then
			classes.CustomMeleeGroups:append('Enspell2')
		else
			classes.CustomMeleeGroups:append('Enspell')
		end
	end
	
	if player.equipment.main and player.equipment.main == "Murgleis" and state.Buff['Aftermath: Lv.3'] then
		classes.CustomMeleeGroups:append('AM')
	end	
end


function check_zerg_sp()
	if state.AutoZergMode.value == 'On' and player.in_combat and not data.areas.cities:contains(world.area) then
		local abil_recasts = windower.ffxi.get_ability_recasts()

		if (not buffactive['Chainspell'] and abil_recasts[0] < latency) then
			add_to_chat(123, 'Zerg Mode ACTIVATION')
            windower.chat.input('/ja "Chainspell" <me>')
			tickdelay = os.clock() + 1.8
			return true		
		else
			return false
		end
	end
		
	return false
end


buff_spell_lists = {
	Auto = {--Options for When are: Always, Engaged, Idle, OutOfCombat, Combat
		-- {Name='Refresh III',	Buff='Refresh',			SpellID=894,	When='Always'},
		-- {Name='Haste II',		Buff='Haste',			SpellID=511,	When='Always'},
		-- {Name='Aurorastorm',	Buff='Aurorastorm',		SpellID=119,	When='Always'},
		-- {Name='Temper II',		Buff='Multi Strikes',	SpellID=895,	When='Engaged'},
		-- {Name='Phalanx',		Buff='Phalanx',			SpellID=106,	When='Engaged'},
        -- {Name='Shell V',		Buff='Shell',			SpellID=52,		When='Always'},
		-- {Name='Protect V',		Buff='Protect',			SpellID=47,		When='Always'},
        -- {Name='Reraise',		Buff='Reraise',			SpellID=135,	When='Always'},
	},
	Default = {
		{Name='Refresh III',	Buff='Refresh',			SpellID=894,	Reapply=false},
		{Name='Haste II',		Buff='Haste',			SpellID=511,	Reapply=false},
		{Name='Stoneskin',		Buff='Stoneskin',		SpellID=54,		Reapply=false},
		{Name='Shell V',		Buff='Shell',			SpellID=52,		Reapply=false},
		{Name='Protect V',		Buff='Protect',			SpellID=47,		Reapply=false},
		{Name='Temper II',		Buff='Multi Strikes',	SpellID=895, 	Reapply=false},
		{Name='Phalanx',		Buff='Phalanx',			SpellID=106,	Reapply=false},
		{Name='Aquaveil',		Buff='Aquaveil',		SpellID=55,		Reapply=false},
        {Name='Reraise',	    Buff='Reraise',		    SpellID=135,	Reapply=false},
	},
	Rebuff = {
		{Name='Refresh III',	Buff='Refresh',			SpellID=894,	Reapply=true},
		{Name='Haste II',		Buff='Haste',			SpellID=511,	Reapply=true},
		{Name='Phalanx',		Buff='Phalanx',			SpellID=106,	Reapply=true},
		{Name='Aquaveil',		Buff='Aquaveil',		SpellID=55,		Reapply=true},
	},
}